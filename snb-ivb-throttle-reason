#!/usr/bin/env bash

# SPDX-License-Identifier: GPL-3.0-or-later

declare -ra gl_required_commands=('iotools' 'tput')

function define_colors
{
    trap handle_error ERR

    local force_color="${1}"
    readonly force_color

    # check if color should be used
    if [ -t 1 ] || [ "${force_color}" == "on" ]; then
        # check if terminal supports colors
        local gl_ncol
        gl_ncol=$(tput colors)
        readonly gl_ncol

        if [ -n "${gl_ncol}" ] && [ "${gl_ncol}" -ge 8 ]; then
            gl_bold="$(tput bold)"
            readonly gl_bold
            gl_normal="$(tput sgr0)"
            readonly gl_normal
            gl_red="$(tput setaf 1)"
            readonly gl_red
            gl_green="$(tput setaf 2)"
            readonly gl_green
        fi
    fi
}

# TODO: make this print red even when stdout is redirected
function print_error
{
    echo "${@}" >&2
}

function exit_failure
{
    exit 1
}

function check_required_commands
{
    trap handle_error ERR

    local missing_count=0
    local required="${1}"
    readonly required

    for c in ${required}; do
        if ! hash "${c}" >/dev/null 2>&1; then
            local msg="${gl_red}Required command not found:${gl_normal} ${gl_bold}${c}${gl_normal}"
            print_error "${msg}"
            ((missing_count++))
        fi
    done

    if [ "${missing_count}" -gt 0 ]; then
        local msg="${gl_red}Missing ${missing_count} required command(s), aborting!${gl_normal}"
        print_error "${msg}"
        exit_failure
    fi
}

function check_euid
{
    trap handle_error ERR

    if [ "${EUID}" -ne 0 ]; then
        local msg="${gl_red}This script should be run as root.${gl_normal}"
        readonly msg
        print_error "${msg}"
        exit_failure
    fi
}

function resolve_indicator
{
    trap handle_error ERR

    local indicator_name="${1}"
    readonly indicator_name
    local indicator_status="${2}"
    readonly indicator_status

    if [ "${indicator_status}" -eq 0 ]; then
        echo -e "${gl_green}${indicator_name} N${gl_normal}"
        return
    fi

    echo -e "${gl_red}${indicator_name} Y${gl_normal}"
}

function handle_error
{
    local error_code=$?
    local error_line="${BASH_LINENO[0]}"
    local error_command="${BASH_COMMAND}"

    # Log the error details
    print_error "Error occurred on line $error_line: $error_command (exit code: $error_code)"
    exit_failure
}

function usage
{
    echo ""
    echo "Usage: $0 -c|--color <address>"
    echo ""
    echo "Read Power Plane 1 (graphics) and Power Plane 0 (core) frequency limit reasons from MMIO address space."
    echo "Only works for Intel 3rd generation CPUs."
    echo ""
    echo "Options:"
    echo "  -c, --color     Force color output."
    exit_failure
}

function die
{
    local _ret="${2:-1}"
    test "${_PRINT_HELP:-no}" = yes && print_help >&2
    echo "$1" >&2
    exit "${_ret}"
}

function begins_with_short_option
{
    local first_option all_short_options='ch'
    first_option="${1:0:1}"
    test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_color="off"

function print_help
{
    printf '%s\n' "Read frequency limiting reasons from MMIO address space. Works only for 3rd generation Intel CPUs."
    printf '\n'
    printf 'Usage: %s [-c|--(no-)color] [-h|--help] <address>\n' "$0"
    printf '\n'
    printf '\t%s\n' "<address>: MMIO register address to read"
    printf '\t%s\n' "-c, --color, --no-color: force colored output when standard output is not a TTY (off by default)"
    printf '\t%s\n' "-h, --help: Prints help"
}

function parse_commandline
{
    _positionals_count=0
    while test $# -gt 0; do
        _key="$1"
        case "$_key" in
        -c | --no-color | --color)
            _arg_color="on"
            test "${1:0:5}" = "--no-" && _arg_color="off"
            ;;
        -c*)
            _arg_color="on"
            _next="${_key##-c}"
            if test -n "$_next" -a "$_next" != "$_key"; then
                {
                    begins_with_short_option "$_next" && shift && set -- "-c" "-${_next}" "$@"
                } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
            fi
            ;;
        -h | --help)
            print_help
            exit 0
            ;;
        -h*)
            print_help
            exit 0
            ;;
        *)
            _last_positional="$1"
            _positionals+=("$_last_positional")
            _positionals_count=$((_positionals_count + 1))
            ;;
        esac
        shift
    done
}

function handle_passed_args_count
{
    local _required_args_string="'address'"
    test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
    test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}

function assign_positional_args
{
    local _positional_name _shift_for=$1
    _positional_names="_arg_address "

    shift "$_shift_for"
    for _positional_name in ${_positional_names}; do
        test $# -gt 0 || break
        eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
        shift
    done
}

function payload
{
    trap handle_error ERR

    define_colors "${_arg_color}"
    check_euid
    check_required_commands "${gl_required_commands[*]}"

    local val
    # TODO: fix this warning
    val="$(iotools mmio_read32 "${_arg_address}")"
    readonly val

    local is_pp1_freq_clipped="$((val & (1 << 31)))"
    readonly is_pp1_freq_clipped
    local rsvd_pp0_30="$((val & (1 << 30)))"
    readonly rsvd_pp0_30
    local is_pp1_freq_below_max_non_turbo="$((val & (1 << 29)))"
    readonly is_pp1_freq_below_max_non_turbo
    local rsvd_pp0_28="$((val & (1 << 28)))"
    readonly rsvd_pp0_28
    local rsvd_pp0_27="$((val & (1 << 27)))"
    readonly rsvd_pp0_27
    local rsvd_pp0_26="$((val & (1 << 26)))"
    readonly rsvd_pp0_26
    local rsvd_pp0_25="$((val & (1 << 25)))"
    readonly rsvd_pp0_25
    local is_pp1_cause_edp="$((val & (1 << 24)))"
    readonly is_pp1_cause_edp
    local rsvd_pp0_23="$((val & (1 << 23)))"
    readonly rsvd_pp0_23
    local is_pp1_cause_hot_vr="$((val & (1 << 22)))"
    readonly is_pp1_cause_hot_vr
    local is_pp1_cause_pl2="$((val & (1 << 21)))"
    readonly is_pp1_cause_pl2
    local rsvd_pp0_20="$((val & (1 << 20)))"
    readonly rsvd_pp0_20
    local rsvd_pp0_19="$((val & (1 << 19)))"
    readonly rsvd_pp0_19
    local is_pp1_cause_pl1="$((val & (1 << 18)))"
    readonly is_pp1_cause_pl1
    local is_pp1_cause_thermals="$((val & (1 << 17)))"
    readonly is_pp1_cause_thermals
    local is_pp1_cause_external_prochot="$((val & (1 << 16)))"
    readonly is_pp1_cause_external_prochot

    local is_pp0_freq_clipped="$((val & (1 << 15)))"
    readonly is_pp0_freq_clipped
    local is_pp0_freq_below_max_turbo_n_cores="$((val & (1 << 14)))"
    readonly is_pp0_freq_below_max_turbo_n_cores
    local is_pp0_freq_below_max_non_turbo="$((val & (1 << 13)))"
    readonly is_pp0_freq_below_max_non_turbo
    local rsvd_pp0_12="$((val & (1 << 12)))"
    readonly rsvd_pp0_12
    local rsvd_pp0_11="$((val & (1 << 11)))"
    readonly rsvd_pp0_11
    local rsvd_pp0_10="$((val & (1 << 10)))"
    readonly rsvd_pp0_10
    local rsvd_pp0_9="$((val & (1 << 9)))"
    readonly rsvd_pp0_9
    local is_pp0_cause_edp="$((val & (1 << 8)))"
    readonly is_pp0_cause_edp
    local is_pp0_cause_mct="$((val & (1 << 7)))"
    readonly is_pp0_cause_mct
    local is_pp0_cause_hot_vr="$((val & (1 << 6)))"
    readonly is_pp0_cause_hot_vr
    local is_pp0_cause_pl2="$((val & (1 << 5)))"
    readonly is_pp0_cause_pl2
    local is_pp0_cause_gt_driver="$((val & (1 << 4)))"
    readonly is_pp0_cause_gt_driver
    local rsvd_pp0_3="$((val & (1 << 3)))"
    readonly rsvd_pp0_3
    local is_pp0_cause_pl1="$((val & (1 << 2)))"
    readonly is_pp0_cause_pl1
    local is_pp0_cause_thermals="$((val & (1 << 1)))"
    readonly is_pp0_cause_thermals
    local is_pp0_cause_external_prochot="$((val & (1 << 0)))"
    readonly is_pp0_cause_external_prochot

    echo "PP1 (GT)"
    echo "    frequency status"
    resolve_indicator "        31 clipped                 " "${is_pp1_freq_clipped}"
    resolve_indicator "        30 RSVD                    " "${rsvd_pp0_30}"
    resolve_indicator "        29 below MAX_NON_TURBO     " "${is_pp1_freq_below_max_non_turbo}"
    echo "    reason"
    resolve_indicator "        28 RSVD                    " "${rsvd_pp0_28}"
    resolve_indicator "        27 RSVD                    " "${rsvd_pp0_27}"
    resolve_indicator "        26 RSVD                    " "${rsvd_pp0_26}"
    resolve_indicator "        25 RSVD                    " "${rsvd_pp0_25}"
    resolve_indicator "        24 EDP                     " "${is_pp1_cause_edp}"
    resolve_indicator "        23 RSVD                    " "${rsvd_pp0_23}"
    resolve_indicator "        22 VR hot                  " "${is_pp1_cause_hot_vr}"
    resolve_indicator "        21 PL2                     " "${is_pp1_cause_pl2}"
    resolve_indicator "        20 RSVD                    " "${rsvd_pp0_20}"
    resolve_indicator "        19 RSVD                    " "${rsvd_pp0_19}"
    resolve_indicator "        18 PL1                     " "${is_pp1_cause_pl1}"
    resolve_indicator "        17 thermals                " "${is_pp1_cause_thermals}"
    resolve_indicator "        16 external PROCHOT        " "${is_pp1_cause_external_prochot}"
    echo
    echo "PP0 (IA)"
    echo "    frequency status"
    resolve_indicator "        15 clipped                 " "${is_pp0_freq_clipped}"
    resolve_indicator "        14 below MAX_TURBO[n-cores]" "${is_pp0_freq_below_max_turbo_n_cores}"
    resolve_indicator "        13 below MAX_NON_TURBO     " "${is_pp0_freq_below_max_non_turbo}"
    echo "    reason"
    resolve_indicator "        12 RSVD                    " "${rsvd_pp0_12}"
    resolve_indicator "        11 RSVD                    " "${rsvd_pp0_11}"
    resolve_indicator "        10 RSVD                    " "${rsvd_pp0_10}"
    resolve_indicator "         9 RSVD                    " "${rsvd_pp0_9}"
    resolve_indicator "         8 EDP                     " "${is_pp0_cause_edp}"
    resolve_indicator "         7 MCT demotion            " "${is_pp0_cause_mct}"
    resolve_indicator "         6 VR hot                  " "${is_pp0_cause_hot_vr}"
    resolve_indicator "         5 PL2                     " "${is_pp0_cause_pl2}"
    resolve_indicator "         4 GT driver               " "${is_pp0_cause_gt_driver}"
    resolve_indicator "         3 RSVD                    " "${rsvd_pp0_3}"
    resolve_indicator "         2 PL1                     " "${is_pp0_cause_pl1}"
    resolve_indicator "         1 thermals                " "${is_pp0_cause_thermals}"
    resolve_indicator "         0 external PROCHOT        " "${is_pp0_cause_external_prochot}"
}

function main
{
    parse_commandline "$@"
    handle_passed_args_count
    assign_positional_args 1 "${_positionals[@]}"
    payload
}

main "$@"
